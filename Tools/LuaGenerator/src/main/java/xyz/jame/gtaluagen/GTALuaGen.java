import com.google.gson.*;
import java.io.*;
import java.nio.file.*;
import java.text.*;
import java.util.*;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.*;

public class GTALuaGen
{
    public static final Options CLI_OPTIONS = new Options().addOption( Option.builder( "i" ).longOpt( "input" ).desc( "Input natives.json file." ).hasArg().required().argName( "path" ).build() ).addOption( Option.builder( "o" ).longOpt( "output" ).desc( "Output natives.lua file." ).hasArg().argName( "path" ).build() ).addOption( Option.builder( "h" ).longOpt( "help" ).desc( "Show this help information." ).build() );
    public static final String SIGNATURE_STRING = "Generated by GTALuaGen, by James Puleo, for ImGTA.";
    public static final String[] LUA_RESERVED = new String[]{ "and", "break", "do", "else", "elseif", "end", "false", "for", "function", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while" };

    public static void main( String[] args )
    {
        CommandLineParser parser = new DefaultParser();
        HelpFormatter help = new HelpFormatter();
        try
        {
            CommandLine line = parser.parse( CLI_OPTIONS, args );
            if ( line.hasOption( 'h' ) )
            {
                help.printHelp( "GTALuaGen", CLI_OPTIONS );
                System.exit( 0 );
            }
            File input = new File( line.getOptionValue( 'i' ) );
            File output = new File( line.getOptionValue( 'o', "natives.lua" ) );
            if ( !input.exists() )
            {
                System.err.println( "Input file does not exist." );
                System.exit( 0 );
            }

            writeLuaNatives( input, output );
        }
        catch ( ParseException e )
        {
            System.err.println( e.getMessage() );
            help.printHelp( "GTALuaGen", CLI_OPTIONS );
        }
        catch ( IOException e )
        {
            e.printStackTrace();
        }
    }

    public static void writeLuaNatives( File input, File output ) throws IOException
    {
        int nativeCount = 0;
        BufferedWriter writer = null;
        try
        {
            JsonObject json = JsonParser.parseString( new String( Files.readAllBytes( input.toPath() ) ) ).getAsJsonObject();
            writer = new BufferedWriter( new FileWriter( output ) );
            writer.write( "-- " + SIGNATURE_STRING + "\n" );
            writer.write( "-- " + new SimpleDateFormat( "MM/dd/yyyy hh:mm aa" ).format( new Date( System.currentTimeMillis() ) ) + "\n\n" );

            for ( String namespace : json.keySet() )
            {
                writer.write( namespace.toLowerCase() + " = {}\n" );
                JsonObject jsonNamespace = json.getAsJsonObject( namespace );
                for ( String nativeAddr : jsonNamespace.keySet() )
                {
                    JsonObject jsonNative = jsonNamespace.getAsJsonObject( nativeAddr );
                    String nativeName = jsonNative.get( "name" ).getAsString();
                    if ( nativeName.isEmpty() )
                        nativeName = "_" + nativeAddr;
                    String nativeJenkins = jsonNative.get( "jhash" ).getAsString();
                    // Skip functions that don't have 4 bytes hash
                    if ( nativeJenkins.isEmpty() )
                    	continue;

                    writer.write( "function " + namespace.toLowerCase() + "." + nativeName.toLowerCase() + "(" );

                    JsonArray nativeParams = jsonNative.getAsJsonArray( "params" );
                    for ( int i = 0; i < nativeParams.size(); i++ )
                    {
                        JsonObject p = nativeParams.get( i ).getAsJsonObject();
                        String paramName = p.get( "name" ).getAsString();
                        final String finalParamName = paramName;
                        if ( Arrays.stream( LUA_RESERVED ).anyMatch( resv -> resv.equalsIgnoreCase( finalParamName ) ) )
                            paramName = "_" + paramName;

                        writer.write( paramName );
                        if ( i != nativeParams.size() - 1 )
                            writer.write( ", " );
                    }
                    writer.write( ")" );
                    if ( !nativeJenkins.isEmpty() )
                        writer.write( " -- " + nativeJenkins );
                    writer.write( "\n" );

                    String retType = jsonNative.get( "return_type" ).getAsString();
                    String funcName, returnStr = "return ";
                    if ( retType.startsWith( "void" ) )
                    {
                    	funcName = "invoke";
                    	returnStr = "";
                    }
                    else if ( retType.startsWith( "float" ) )
                        funcName = "invokeFloat";
                    else if ( retType.equalsIgnoreCase( "char*" ) )
                        funcName = "invokeString";
                    else
                        funcName = "invokeInteger";

                    writer.write( "\t" + returnStr + funcName + "(" + nativeAddr );
                    if ( nativeParams.size() != 0 )
                        writer.write( ", " );

                    // FIXME: duplicate code!
                    for ( int i = 0; i < nativeParams.size(); i++ )
                    {
                        JsonObject p = nativeParams.get( i ).getAsJsonObject();
                        String paramName = p.get( "name" ).getAsString();
                        final String finalParamName = paramName;
                        if ( Arrays.stream( LUA_RESERVED ).anyMatch( resv -> resv.equalsIgnoreCase( finalParamName ) ) )
                            paramName = "_" + paramName;
                        writer.write( paramName );

                        if ( i != nativeParams.size() - 1 )
                            writer.write( ", " );
                    }
                    writer.write( ")\n" );
                    writer.write( "end\n\n" );
                    nativeCount++;
                }
            }
            System.out.println( "Created natives.lua for " + nativeCount + " functions." );
        }
        catch ( JsonParseException e )
        {
            System.err.println( "Unable to parse JSON input." );
            System.err.println( e.getMessage() );
        }
        finally
        {
            if ( writer != null )
                writer.close();
        }
    }
}
